import scala.util.control.Breaks.{break, breakable}

class Exploit(stream: List[Long], window: Int) {
  private var _weakness = 0L
  private var _exploit: List[Long] = List.empty

  def exploit(): Unit = {
    findVuln()
    breakable {
      for (w <- LazyList.from(2) ) {
        stream.sliding(w, 1)
          .foreach(i => if (i.sum == _weakness) _exploit = i)
        if (_exploit.nonEmpty) break
      }
    }

    println(_exploit.min + _exploit.max)
  }

  private def findVuln(): Unit = {
    stream.sliding(window, 1).foreach(l =>  {
      val valid = l
        .slice(0, l.size -1)
        .toSet
        .subsets(2)
        .map(s => s.sum)
        .exists(r => r.equals(l.last))
      if (!valid) _weakness = l.last
    })
  }
}
